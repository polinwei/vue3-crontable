import{getCurrentInstance as t}from"vue";let o=[],n=[];const e=t=>{let n=-1;o&&(n=o.findIndex((o=>o.method===t.method))),-1===n&&o.push({...t})},i=function(t){const o=t.method;if(e(t),!(t.method&&t.timerRunning||!1===t.autoStart)){let e=!1;if(this.$options.methods[o]){e=!0;const i={timer:setInterval((()=>{this.$options.methods[o].call(this)}),t.time),method:o,timerRunning:!0,time:t.time,lastInvocation:+new Date};n.push({...i})}if(!e)throw new Error(`Cron method '${o}' does not exist.`)}};var r={install:(r,s)=>{const d={add:t=>{console.log(t),t.forEach((t=>{e(t),!1!==t.autoStart&&d.start(t.method)}))},jobsList:()=>o.map((t=>t)),jobsRuning:()=>n.map((t=>t)),restart:t=>{d.stop(t),d.start(t)},start:e=>{if(-1!=n.findIndex((t=>t.method===e)))return!0;const i=o.findIndex((t=>t.method===e)),r=t().ctx;let s=!1;if(r[e]&&-1!=i){s=!0;const t={timer:setInterval((()=>{r[e].call(void 0)}),o[i].time),method:e,timerRunning:!0,time:o[i].time,lastInvocation:+new Date};n.push({...t})}if(!s)throw new Error(`Cron method '${e}' does not exist and cannot be started.`)},stop:t=>{const o=n.findIndex((o=>o.method===t));let e=!1;if(-1!=o&&(clearInterval(n[o].timer),n.splice(o,1),e=!0),!e)throw new Error(`Cron method '${t}' does not exist and cannot be stop.`)}};s&&void 0!==s.cron&&d.add(s.cron),r.config.globalProperties.$cron=d,r.provide("cron",s),r.mixin({mounted(){var t,o;void 0!==this.$options.cron&&(t=this.$options.cron,o=i.bind(this),t.constructor!==Array?o(t):t.map(o()))}})}};export{r as default};
