import{getCurrentInstance as t}from"vue";let o=[],e=[];var n={install:(n,r)=>{const i=t=>{let e=-1;o&&(e=o.findIndex((o=>o.method===t.method))),-1===e&&o.push({...t})},a={add:t=>{Array.isArray(t)?t.forEach((t=>{i(t),!1!==t.autoStart&&a.start(t.method)})):(i(t),!1!==t.autoStart&&a.start(t.method)),console.log(t)},jobsList:()=>o.map((t=>t)),jobsRuning:()=>e.map((t=>t)),restart:t=>{a.stop(t),a.start(t)},start:n=>{if(-1!=e.findIndex((t=>t.method===n)))return!0;const r=o.findIndex((t=>t.method===n)),i=t().ctx;let a=!1;if(i[n]&&-1!=r){a=!0;const t={timer:setInterval((()=>{i[n].call()}),o[r].time),method:n,timerRunning:!0,time:o[r].time,lastInvocation:+new Date};e.push({...t})}if(!a)throw new Error(`Cron method '${n}' does not exist and cannot be started.`)},stop:t=>{const o=e.findIndex((o=>o.method===t));let n=!1;if(-1!=o&&(clearInterval(e[o].timer),e.splice(o,1),n=!0),!n)throw new Error(`Cron method '${t}' does not exist and cannot be stop.`)}};r&&void 0!==r.cron&&a.add(r.cron),n.config.globalProperties.$cron=a,n.provide("cron",r),n.mixin({mounted(){void 0!==this.$options.cron&&a.add(this.$options.cron)}})}};export{n as default};
